x-base-service: &base_service
  env_file: .env
  networks:
    - datawagon

x-redis: &base_redis
  image: redis:7.2.2-alpine
  container_name: redis
  restart: unless-stopped
  command: >
    --requirepass ${REDIS_PASSWORD}
  expose:
    - ${REDIS_PORT}
  healthcheck:
    test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
    interval: 30s
    timeout: 10s
    retries: 5

x-elasticsearch: &base_elasticsearch
  image: docker.io/elastic/elasticsearch:8.11.1
  container_name: elasticsearch
  env_file: .env
  expose:
    - ${ES_PORT}
  environment:
    - discovery.type=single-node
    - xpack.security.enabled=true
    - ELASTIC_USERNAME=${ES_USER}
    - ELASTIC_PASSWORD=${ES_PASSWORD}
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  healthcheck:
    test: curl ${ES_PROTOCOL}://x-elasticsearch:${ES_PORT} >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
    interval: 30s
    timeout: 10s
    retries: 5

x-airflow-common: &airflow-common
  build: ./airflow
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-db/${AIRFLOW_DB_NAME}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-db/${AIRFLOW_DB_NAME}
    AIRFLOW__CELERY__BROKER_URL: redis://:${REDIS_PASSWORD}@redis:${REDIS_PORT}/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/src:/opt/airflow/src
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/data:/opt/airflow/data
    - ./backups:/tmp/backups
  user: "${AIRFLOW_UID:-50000}:0"
  env_file: .env
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-db:
      condition: service_healthy

x-airflow-worker: &airflow-worker
  command: celery worker
  healthcheck:
    test:
      - 'CMD-SHELL'
      - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
    interval: 10s
    timeout: 10s
    retries: 5
  restart: always


services:

  nginx:
    <<: *base_service
    image: nginx:1.25.3-alpine
    container_name: nginx
    restart: unless-stopped
    profiles:
      - dev
    depends_on: 
      kibana: 
        condition: service_healthy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
      - ./nginx/static/errors:/var/www/errors/:ro
      - ./nginx/static/log/udp_error_log:/var/log/nginx/udp_error.log:rw
      - ./nginx/static/log/access_log:/var/log/nginx/access.log:rw
      - ./nginx/static/log/error_log:/var/log/nginx/error.log:rw
    ports:
      - 80:80

  db:
    <<: *base_service
    image: postgres:16-alpine3.18
    hostname: db
    container_name: db
    env_file: .env
    profiles:
      - dev
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - ${DB_PORT}:5432
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${DB_USER} -D ${DB_NAME} > /dev/null; if [[ $$? == 0 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  pg-initer:
    <<: *base_service
    build: ./backend/pg_initer
    container_name: pg-initer
    restart: on-failure
    profiles:
      - dev
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./backend/pg_initer/schema.sql:/opt/pg_initer/src/schema.sql:ro
    depends_on:
      db:
        condition: service_healthy

  onboarding_panel:
    <<: *base_service
    build: ./backend/onboarding_panel
    container_name: onboarding_panel
    env_file: .env
    profiles:
      - dev
    volumes:
      - ./backend/onboarding_panel:/opt/onboarding_panel
    expose:
      - ${ONBOARDING_PANEL_PORT}
    healthcheck:
      test: curl http://onboarding_panel:${ONBOARDING_PANEL_PORT} >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    <<: *base_service
    <<: *base_redis
    container_name: redis
    profiles:
      - dev
    volumes:
      - redis-data:/data

  airflow-db:
    <<: *base_service
    image: postgres:16-alpine3.18
    container_name: airflow-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${AIRFLOW_DB_USER}
      - POSTGRES_PASSWORD=${AIRFLOW_DB_PASSWORD}
      - POSTGRES_DB=${AIRFLOW_DB_NAME}
    profiles: 
      - dev
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - airflow-db:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${AIRFLOW_DB_USER} -D ${AIRFLOW_DB_NAME} > /dev/null; if [[ $$? == 0 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    <<: *base_service
    <<: *base_elasticsearch
    profiles:
      - dev
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data:rw

  kibana:
    <<: *base_service
    image: docker.io/elastic/kibana:8.11.1
    container_name: kibana
    profiles:
      - dev
    depends_on: 
      elasticsearch: 
        condition: service_healthy
      es-initer: 
        condition: service_completed_successfully
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    environment:
      - ELASTICSEARCH_HOSTS=${ES_PROTOCOL}://${KIBANA_USER}:${KIBANA_PASSWORD}@${ES_HOST}:${ES_PORT}
      - ELASTICSEARCH_USERNAME=${KIBANA_USER}
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    expose:
    - ${KIBANA_PORT}
    healthcheck:
      test: curl http://kibana:${KIBANA_PORT} >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-webserver:
    <<: *base_service
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://airflow-webserver:${AIRFLOW_PORT}/airflow/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./airflow/config/airflow.cfg:/opt/airflow/airflow.cfg
    profiles: 
      - dev
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *base_service
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ['CMD-SHELL', 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    profiles: 
      - dev
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker01:
    <<: *base_service
    <<: *airflow-common
    <<: *airflow-worker
    container_name: airflow-worker01
    profiles: 
      - dev
    env_file: .env
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *base_service
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command: [ "-c", "chmod +x /opt/airflow/entrypoint_airflow.sh && /opt/airflow/entrypoint_airflow.sh" ]
    profiles: 
      - dev
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    depends_on:
      <<: *airflow-common-depends-on
    user: "0:0"
    volumes:
      - ./airflow:/sources

  es-initer:
    <<: *base_service
    build: ./backend/es_initer
    container_name: es-initer
    restart: on-failure
    profiles:
      - dev
    volumes:
      - ./backend/es_initer/mapping:/opt/es_initer/mapping:ro
    depends_on:
      elasticsearch:
        condition: service_healthy


volumes:
  postgres-data:
  redis-data:
  airflow-db:
  elasticsearch-data:

networks:
  datawagon:
    driver: bridge